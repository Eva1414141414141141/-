Доклад Екимовой Евы Дис-214/21.Б
Docker – это платформа для разработки, доставки и запуска приложений в изолированных контейнерах. Контейнеры позволяют упаковывать приложение с его зависимостями и конфигурациями, 
обеспечивая стабильную работу в любой среде. Это особенно полезно для разработчиков и системных администраторов, поскольку упрощает процесс внедрения приложений и управления ими. 
Контейнеры обеспечивают изоляцию, которая предотвращает конфликты между различными версиями библиотек и другими зависимостями.

Docker – позволяет создавать образы, содержащие все необходимое для запуска приложения, включая код, библиотеки и системные инструменты. 
Эти образы могут запускаться в любой системе, что делает их очень портативными и удобными в использовании. 
Это значительно упрощает процесс переноса приложений между различными средами, такими как разработка, тестирование и производство.
Контейнеризация также способствует более эффективному использованию ресурсов, поскольку несколько контейнеров работают на одном компьютере, используя общие ресурсы. 
Это делает Docker отличным выбором для архитектуры микросервисной, где каждое приложение или служба работает в своем собственном контейнере. 
Почему стоит использовать docker в тестах
1.	Проблема запуска тестов в команде без установки стека тестовых технологий (solenoid, браузеры и др.)
2.	Менее требовательный, чем виртуальная машина по ресурсам (масштабирование ограничивается только ресурсами памяти и процессора на узлах с docker)
3.	Проблема с инсталляцией дополнительного софта в разных контурах т.к. имеются ограничения
4.	Использование TestContainers решает многие проблемы. Например, запуск kafka в docker для работы приложения или интеграционных сервисов.
Главными преимуществами докера является его простота и дружелюбность в поведении в инструментах автоматизации. Таким образом, с помощью docker вы всегда сможете подтянуть нужные вам 
образа с программным обеспечением из docker hub либо собрать образ самостоятельно (проблема с заявками по инсталляции доп. 
ПО на ваш сервер уходит в прошлое). Например, вы можете использовать готовые docker image: kafka, PostgreSQL, Selenoid и др. 
Также можно отметить, что запуск тестов можно выполнить с любого удобного вам сервера вместо агента. Данная технология кроссплатформенная, т.е. запускается в разных ОС.
К минусам можно отнести повышенной порог входа для работы, а также особенности масштабирования.
Dockerfile 
Docker может автоматически создавать образы, читая инструкции из файла Dockerfile. 
Dockerfile — это текстовый документ, содержащий все команды, которые пользователь может вызвать в командной строке для сборки образа. Его имя записывается именно так — без расширения.
При запуске команды docker build для создания нового образа подразумевается, что Dockerfile находится в текущей рабочей директории. Если этот файл находится в каком-то другом месте, 
его расположение можно указать с использованием флага -f. простой Dockerfile:
FROM ubuntu:20.04
RUN apt-get update && apt-get install -y wget curl nano
WORKDIR /root/docker
COPY myfile myfile
FROM –Задает базовый образ. Все последующие инструкции создают слои поверх родительского образа.
RUN	– Выполняет команду внутри контейнера и сохраняет результат.
COPY – Копирует файлы и папки из текущей директории, где находится пользователь в указанную директорию в контейнере. Если файл нужно скачать по ссылке или распаковать архив 
используйте ADD.
ADD – Копирует файлы и папки из текущей позиции пользователя, скачивает файлы по URL и работает с tar-архивами."
CMD – Выполняет команду с указанными аргументами во время запуска контейнера.
WORKDIR – Устанавливает рабочую директорию внутри контейнера. 
